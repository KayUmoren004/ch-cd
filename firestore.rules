rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isRoomMember(roomId) {
      return exists(/databases/$(database)/documents/rooms/$(roomId)/players/$(request.auth.uid));
    }

    match /rooms/{roomId} {
      allow create: if request.auth != null;
      allow read: if isRoomMember(roomId);
      allow update, delete: if request.auth.uid == resource.data.hostId;
    }

    match /rooms/{roomId}/players/{playerId} {
      allow read: if isRoomMember(roomId);
      allow write: if request.auth.uid == playerId;
    }

    match /rooms/{roomId}/rounds/{roundId} {
      allow read: if isRoomMember(roomId);
      // phase-gated writes handled via security rules
      allow update: if isRoomMember(roomId);
      allow create, delete: if false;
    }

    match /matchmaking/queues/{region}/entries/{entryId} {
      allow write: if request.auth != null && request.auth.uid == request.resource.data.uid;
      allow read: if false;
    }
  }
}
